/**

  @mixins
-----------------------------------------------------
  base/mixins.scss
--------------------------------------------------------

  Define all project wide mixins.

-----------------------------------------------------  */

/**

  @breakpoints mixin
-----------------------------------------------------

  This mixin makes using inline media queries easy.
  Options include bp-min for min-width, bp-max
  for max-width, and bp-between for min and max widths.

  You can use your breakpoint vars, or any other value.

  Usage: styles at medium breakpoint
  .some-element {
    @include bp-min($breakpoint--md){
      *** your-styles: go-here; ***
    }
  }

  Usage: styles at custom breakpoint
  .another-element {
    @include bp-max(83.45em){
      *** your-styles: go-here; ***
    }
  }

-----------------------------------------------------  */

// Breakpoint At Least, so eg 56em and higher
@mixin bp-min($width) {
  @media screen and (min-width: $width) {
    @content;
  }
}

// Breakpoint up to width, so eg 82em and lower
@mixin bp-max($width) {
  @media screen and (max-width: $width - .01) {
    @content;
  }
}

// Breakpoint Between
@mixin bp-between($min-width, $max-width) {
  @media screen and (min-width: $min-width) and (max-width: $max-width) {
    @content;
  }
}

/*

  @clearfix mixin
---------------------------------------------------------

  Use @include clearfix(); in your CSS

  Usage: clearfix mixin
  .element-to-clearfix {
    @include cleafix();
  }

--------------------------------------------------------- */
@mixin clearfix() {
  &:before,
  &:after {
    content: " ";
    display: table;
  }

  &:after {
    clear: both;
  }

  // For IE 6/7 (trigger hasLayout)
  zoom: 1;
}

/*

  @grid generator mixin
---------------------------------------------------------

  Use @include generate-columns();

  Default column-count and gutter values in variables.scss

--------------------------------------------------------- */

// column generation
@mixin generate-columns($columns: $column-count, $gutter: $gutter-width) {
  // Placeholder values
  %grid-column {
    position: relative;
    float: left;
    // Prevent columns from collapsing when empty
    min-height: 1px;
    // Inner gutter via padding, to the right only
    padding-right: $gutter * 1em;
  }
  // create colomns
  @for $col from 1 to $columns {
    .col-#{$col} {
      width: percentage($col / $columns);
      //Apply column properties from placeholder
      @extend %grid-column;
    }
  }
}

/**

  @container mixin
---------------------------------------------------------

  Use @include generate-container()

  Supply a desired length for container(if less than 48ems widths set to 95% of
  viewport), gutter value for both ends. Values in variables.scss.

--------------------------------------------------------- */

// Generate container
@mixin generate-container($breakpoint, $gutter: $gutter-width) {
  //margins on left and right set to auto for centering
  margin: 0 auto;
  // Increase left+right $gutter values on smaller breakpoints
  @if $breakpoint < map-get($breakpoints, lg) {
      max-width: 95%;
      padding: 0 $gutter * 1em;}
      @else {
        max-width: $breakpoint;
        padding: 0 ($gutter/ 2 * 1em);
      }
}

/**

  @font size mixin
---------------------------------------------------------

  Use @include font-sizes()

  Mixin to set heading tag font sizes

--------------------------------------------------------- */
@mixin font-sizes($map){
  @each $ele, $size in $map {
    #{$ele} {
      font-size: $size;
    }
  }

}
