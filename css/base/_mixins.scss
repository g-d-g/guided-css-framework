/**

  @mixins
-----------------------------------------------------
  base/mixins.scss
--------------------------------------------------------

  Define all project wide mixins.

-----------------------------------------------------  */

/**

  @breakpoints mixin
-----------------------------------------------------

  This mixin makes using inline media queries easy.
  Options include bp-min for min-width, bp-max
  for max-width, and bp-between for min and max widths.

  You can use your breakpoint vars, or any other value.

  Usage: styles at medium breakpoint
  .some-element {
    @include bp-min($breakpoint--md){
      *** your-styles: go-here; ***
    }
  }

  Usage: styles at custom breakpoint
  .another-element {
    @include bp-max(83.45em){
      *** your-styles: go-here; ***
    }
  }

-----------------------------------------------------  */

// Breakpoint At Least, so eg 56em and higher
@mixin bp-min($width) {
  @media screen and (min-width: $width) {
    @content;
  }
}

// Breakpoint up to width, so eg 82em and lower
@mixin bp-max($width) {
  @media screen and (max-width: $width - .01) {
    @content;
  }
}

// Breakpoint Between
@mixin bp-between($min-width, $max-width) {
  @media screen and (min-width: $min-width) and (max-width: $max-width) {
    @content;
  }
}

/*

  @clearfix mixin
---------------------------------------------------------

  Use @include clearfix(); in your CSS

  Usage: clearfix mixin
  .element-to-clearfix {
    @include clearfix();
  }

--------------------------------------------------------- */
@mixin clearfix() {
  &:before,
  &:after {
    content: " ";
    display: table;
  }

  &:after {
    clear: both;
  }

  // For IE 6/7 (trigger hasLayout)
  zoom: 1;
}

/*

  @grid generator mixin
---------------------------------------------------------

  Use @include generate-columns();

  Default column-count and gutter values in variables.scss

--------------------------------------------------------- */

// column generation
@mixin generate-columns($columns: $column-count, $gutter: $gutter-width) {
  // Placeholder values
  %grid-column {
    position: relative;
    float: left;

    // Prevent columns from collapsing when empty
    min-height: 1px;

    // Inner gutter via padding, to the right only
    padding-right: $gutter * 1em;
  }

  // create colomns
  @for $col from 1 to $columns {
    .col-#{$col} {
      width: percentage($col / $columns);

      //Apply column properties from placeholder
      @extend %grid-column;
    }
  }
}

/**

  @container mixin
---------------------------------------------------------

  Use @include generate-container()

  Supply a desired length for container(if less than 48ems widths set to 95% of
  viewport), gutter value for both ends. Values in variables.scss.

--------------------------------------------------------- */

// Generate container
@mixin generate-container($breakpoint, $gutter: $gutter-width) {
  //margins on left and right set to auto for centering
  margin: 0 auto;

  // Increase left+right $gutter values on smaller breakpoints
  @if $breakpoint < map-get($breakpoints, lg) {
    max-width: 95%;
    padding: 0 $gutter * 1em;
  } @else {
    max-width: $breakpoint;
    padding: 0 ($gutter/ 2 * 1em);
  }
}

/**

  @font size mixin
---------------------------------------------------------

  Use @include font-sizes()

  Mixin to set heading tag font sizes

--------------------------------------------------------- */
@mixin font-sizes($map) {
  @each $ele, $size in $map {
    #{$ele} {
      font-size: $size;
    }
  }
}

/**

  @responsive font size mixin
---------------------------------------------------------

  ##### INCOMPLETE #####

--------------------------------------------------------- */
@mixin responsive-size($fs-map) {
  @each $bp, $fs in $fs-map {
    @if $bp == 0 {
      font-size: $fs;
    } @else {
      @media screen and (min-width: $bp) {
        font-size: $fs;
      }
    }
  }
}

/**

  @Buttons mixin
---------------------------------------------------------

 sample usage : element-name { @include buttons($text-color, 6px); }

--------------------------------------------------------- */
@mixin buttons($color: inherit, $border: $border-radius--base) {
  color: $color;

  //background-color: $background;
  border: 0;
  border-radius: $border;
  cursor: pointer;

  // keep consistancy with forms
  line-height: 1.125rem;
  font-family: inherit;
  font-size: inherit;
  text-decoration: none;

  // to give padding
  display: inline-block;
  padding: .75em 1.5em;
  box-sizing: border-box;

  &:hover {
    color: $color;

    //darken bg on hover
    box-shadow: inset 0 0 0 20rem rgba(0, 0, 0, .0625);
  }

  &:active {
    // on click
    color: $color;
    box-shadow: inset 0 0 0 20rem rgba(0, 0, 0, .125);
  }

  &:visited {
    color: $color;
  }

  &:focus {
    outline: none;
    border-color: rgba(0, 0, 0, .125);
  }
}

/**

  @border mixin
---------------------------------------------------------

  Set border
  Usage; @include border-all()

--------------------------------------------------------- */
@mixin border-all($thickness: 1px) {
  border: $thickness solid;
}

/**

  @padding mixins
---------------------------------------------------------

  Usage example: @include padding-left-righ(2rem)

--------------------------------------------------------- */
@mixin padding-left-right($val: 0.5rem) {
  padding: 0 $val;
}

@mixin padding-top-bottom($val: 0.5rem) {
  padding: $val 0;
}

@mixin padding-all($val: 0.5rem) {
  padding: $val;
}

/**

  @margin mixins
---------------------------------------------------------

  Usage example: @include margin-left-righ(1rem)

--------------------------------------------------------- */
@mixin margin-left-right($val: 0.5rem) {
  margin: 0 $val;
}

@mixin margin-top-bottom($val: 0.5rem) {
  margin: $val 0;
}

@mixin margin-all($val: 0.5rem) {
  margin: $val;
}

/**

  @shadow mixin
---------------------------------------------------------

  Usage; @include box-shadow(0px 4px 5px #666, 2px 6px 10px #999);
  will generate for; offset-x | offset-y | blur-radius | color

--------------------------------------------------------- */
@mixin box-shadow($shadows...) {
  box-shadow: $shadows;
}

/**

  @color generate
---------------------------------------------------------

  Generates color classes for background, border and text.

  Supply a color value and desired name;
  @include generate-color(map-get($palette-red, 200), "light-red");

--------------------------------------------------------- */
@mixin generate-color($col, $name) {
  .#{$name} {
    color: $col;
  }

  .bg-#{$name} {
    background-color: $col;
  }

  .border-#{$name} {
    border-color: $col;
  }
}
